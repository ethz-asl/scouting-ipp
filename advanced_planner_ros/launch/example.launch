<launch>
  <arg name="ignore_mav_obstacles"
     default="false"
     doc="Assume the map to be collision free for the MAV."/>
  <arg name="debug_gdb" default="false"/>
  <!-- Gazebo arguments -->
  <arg name="mav_name" default="firefly"/>
  <arg name="gui" default="false"/>
  <arg name="verbose_gazebo" default="false"/>

  <!-- Voxblox arguments -->
  <arg name="voxel_size" default="0.10"/>
  <arg name="voxels_per_side" default="16"/>
  <arg name="ray_length" default="5.0"/>
  <arg name="method" default="merged"/>
  <arg name="verbose_voxblox" default="false"/>
    
  <!-- Unreal Routine arguments -->
  <arg name="uecv_mode" default="fast"/>
  <arg name="slowdown" default="0.0"/>
  <arg name="delay" default="3.0"/>  
  
  <!-- Unreal Sensor arguments (ground_truth, kinect, gaussian_depth_noise) -->
  <arg name="model_type" default="gaussian_depth_noise"/>
  <arg name="flatten_distance" default="6.0"/>
  <arg name="maximum_distance" default="0.0"/>
  
  <!-- Odometry  arguments (random_walk, ground_truth) -->
  <arg name="odom_noise_model" default="random_walk"/>
  
  <!--  Planner arguments-->
  <arg name="planner_config" default="planners/example_config.yaml"/>
  <arg name="evaluator_config" default="evaluators/goal_distance.yaml"/>
  
  <!--  Experiment arguments -->  
  <arg name="experiment_config" default="example.yaml"/>

  <arg name="map_path" default="/home/$(env USER)/data/maps/map_212.png"/>
  <arg name="map_config_path" default="/home/$(env USER)/data/maps/cfg/map_212.yaml"/>

  <arg name="height_map_path" default="/home/$(env USER)/data/maps/height/height_212.exr"/>

  <arg name="paths_path" default="/tmp/evaluator_paths/" />

  <arg name="unknown_init_cost" default="min" />
  <arg name="eval_planner" default="prm_star" />
  
  <arg unless="$(arg debug_gdb)" name="launch_prefix" value="" />
  <arg if="$(arg debug_gdb)" name="launch_prefix" value="gdbserver :65535" />

  <!-- *** Run the Simulation *** -->
  <!-- Load experiment config -->
  <rosparam command="load" file="$(find ros_planner_planexp)/cfg/experiments/$(arg experiment_config)"/>

  <!-- Setup empty gazebo world for physics-->
<!--   <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/> -->
<!--   <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/> -->
<!--   <include file="$(find gazebo_ros)/launch/empty_world.launch"> -->
<!--     <arg name="world_name" value="$(find unreal_cv_ros)/content/gazebo_empty.world" /> -->
<!--     <arg name="debug" value="false" /> -->
<!--     <arg name="paused" value="true" /> -->
<!--     <arg name="gui" value="$(arg gui)" /> -->
<!--     <arg name="verbose" value="$(arg verbose_gazebo)"/> -->
<!--   </include> -->

  <group ns="$(arg mav_name)">
    <!-- Setup a mav -->
    <node pkg="mav_simulator" type="mav_simulator_node" name="mav_simulator" output="screen">
      <remap from="odometry" to="ground_truth/odometry"/>
      <param name="map_path" value="$(arg map_path)" />
      <param name="map_config_path" value="$(arg map_config_path)" />
      <param name="height_map_path" value="$(arg height_map_path)" />
      <param name="ignore_mav_obstacles" value="$(arg ignore_mav_obstacles)" />
      <param name="provide_full_init_depth" value="true" />
    </node>
<!--     <include file="$(find rotors_gazebo)/launch/spawn_mav.launch"> -->
<!--       <arg name="mav_name" value="$(arg mav_name)" /> -->
<!--       <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" /> -->
<!--       <arg name="enable_ground_truth" value="true" /> -->
<!--       <arg name="enable_logging" value="false" /> -->
<!--       <arg name="z" value="0" /> -->
<!--     </include> -->
<!--      -->
<!--      --><!-- MPC trajectory tracker (0.0021 sampling time needs to match odom publish rate!)--> -->
<!--     <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true"> -->
<!--       <remap from="odometry" to="ground_truth/odometry" /> -->
<!--       <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" /> -->
<!--       <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/> -->
<!--       <param name="use_rc_teleop" value="false"/> -->
<!--       <param name="verbose" value="false" /> -->
<!--       <param name="reference_frame" value="world"/> -->
<!--       <param name="sampling_time" value="0.0021"/> -->
<!--     </node> -->
<!--      -->
<!--      --><!-- Rotor input controller -->
<!--     <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true"> -->
<!--       <remap from="odometry" to="ground_truth/odometry" /> -->
<!--       <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" /> -->
<!--     </node> -->
<!--      -->
<!--      --><!-- Odometry: noise model -->
<!--     <node name="odometry_noise_model" pkg="active_3d_planning_app_reconstruction" type="gps_odometry_simulator.py" output="screen"> -->
<!--       <param name="position_uncertainty" value="0.05"/> -->
<!--       <param name="roll_pitch_uncertainty" value="1.5" /> -->
<!--       <param name="yaw_uncertainty" value="5.0" /> -->
<!--       <param name="noise_model" value="$(arg odom_noise_model)" /> -->
<!--       <param name="publish_tf" value="true" /> -->
<!--       <remap from="odometry_in" to="ground_truth/odometry" /> -->
<!--     </node>  -->

<!--      --><!-- static camera transform -->
<!--     <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 -0.5 0.5 -0.5 0.5 /camera_link /camera 100"/>   -->
  </group>

<!--   <group ns="unreal"> -->
<!--      --><!-- Unreal vision client -->
<!--     <node name="unreal_ros_client" pkg="unreal_cv_ros" type="unreal_ros_client.py" required="true" output="screen"> -->
<!--       <param name="mode" value="$(arg uecv_mode)"/> -->
<!--       <param name="publish_tf" value="false"/> -->
<!--       <param name="collision_on" value="true"/> -->
<!--       <param name="slowdown" value="$(arg slowdown)"/> -->
<!--       <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" /> -->
<!--     </node> -->
<!--      -->
<!--      --><!-- Unreal sensor model -->
<!--     <node name="unreal_sensor_model" pkg="unreal_cv_ros" type="sensor_model.py" output="screen"> -->
<!--       <param name="camera_params_ns" value="/unreal/unreal_ros_client/camera_params"/> -->
<!--       <param name="flatten_distance" value="$(arg flatten_distance)"/> -->
<!--       <param name="model_type" value="$(arg model_type)" /> -->
<!--       <param name="maximum_distance" value="$(arg maximum_distance)" /> -->
<!--       <param name="k_mu_2" value="0.0024" /> -->
<!--       <param name="k_sigma_2" value="0.0024" /> -->
<!--       <remap from="ue_sensor_raw" to="unreal_ros_client/ue_sensor_raw" /> -->
<!--     </node> -->

<!--      --><!-- Simulation manager for launching the MAV and monitoring -->
<!--     <node name="simulation_manager" pkg="unreal_cv_ros" type="simulation_manager.py" output="screen"> -->
<!--       <param name="ns_mav" value="/$(arg mav_name)" /> -->
<!--       <param name="ns_gazebo" value="/gazebo" /> -->
<!--       <param name="monitor" value="true" /> -->
<!--       <param name="horizon" value="20" /> -->
<!--       <remap from="ue_raw_in" to="unreal_ros_client/ue_sensor_raw" /> -->
<!--       <remap from="ue_out_in" to="unreal_sensor_model/ue_sensor_out" /> -->
<!--     </node> -->
    
<!--      --><!-- Experiment launcher -->
<!--     <node name="eval_data_node" pkg="active_3d_planning_app_reconstruction" type="eval_data_node.py" output="screen" required="true"> -->
<!--       <remap from="ue_out_in" to="unreal_sensor_model/ue_sensor_out" /> -->
<!--       <remap from="unreal_simulation_ready" to="simulation_manager/simulation_ready" /> -->
<!--       <remap from="collision" to="unreal_ros_client/collision" /> -->
<!--       <param name="ns_planner" value="/planner/planner_node" /> -->
<!--       <param name="ns_voxblox" value="/planner/voxblox_node" /> -->
<!--       <param name="delay" value="$(arg delay)" /> -->
<!--       <param name="startup_timeout" value="30.0" /> -->
<!--       <param name="evaluate" value="false" /> -->
<!--     </node> -->
<!--   </group> -->
  
  <group ns="planner">
    <!-- Voxblox -->
<!--     <node name="map_server_planexp" pkg="map_server_planexp" type="map_server_planexp_node" output="screen"> -->
<!--       <remap from="/map_data" to="/$(arg mav_name)/map_data"/> -->
<!--       <param name="ignore_mav_obstacles" value="$(arg ignore_mav_obstacles)" /> -->
<!--     </node> -->
    
    <!-- Planner -->
    <node name="planner_node" pkg="ros_planner_planexp" type="ros_planner_planexp_node" output="screen" launch-prefix="$(arg launch_prefix)">
		  <!-- Voxblox Server -->
	  <remap from="/map_data" to="/$(arg mav_name)/map_data"/>
	  <remap from="/map_data_depth" to="/$(arg mav_name)/map_data_depth"/>
      <remap from="planner_node/esdf_map_in" to="voxblox_node/esdf_map_out" />
      <remap from="planner_node/tsdf_map_in" to="voxblox_node/tsdf_map_out" />
      <param name="use_tf_transforms" value="false" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="update_mesh_every_n_sec" value="0.0" />   
      <param name="publish_traversable" value="false" />    
      <param name="publish_pointclouds" value="false" />
      <param name="map_config_path" value="$(arg map_config_path)" />
      <param name="ignore_mav_obstacles" value="$(arg ignore_mav_obstacles)" />
      <param name="paths_path" value="$(arg paths_path)" />
      <param name="unknown_init_cost" value="$(arg unknown_init_cost)" />
      <param name="map/planner_type" value="$(arg eval_planner)" />
    
    	<!-- General Settings -->
      <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" />
      <remap from="command/trajectory" to="/$(arg mav_name)/command/trajectory" />

      <!-- Build the Planner by Configuration     -->
      <rosparam command="load" file="$(find ros_planner_planexp)/cfg/$(arg planner_config)"/>
      <rosparam command="load" file="$(find ros_planner_planexp)/cfg/$(arg evaluator_config)"/>
    </node>    
  </group>

  <!-- RVIZ Visualization -->
<!--   <node type="rviz" name="rviz_voxblox" pkg="rviz" args="-d $(find active_3d_planning_app_reconstruction)/cfg/experiments/experiment_visualization.rviz"/> -->
  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find ros_planner_planexp)/cfg/visualization/30x40_planner.rviz"/>
</launch>
